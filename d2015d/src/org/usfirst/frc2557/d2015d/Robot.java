// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2557.d2015d;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

import org.usfirst.frc2557.d2015d.commands.*;
import org.usfirst.frc2557.d2015d.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	// Declaring each command
	
    Command UltraReading;
    Command DriveTo;
    Command Autonomous;
    Command SweepUltraLeft;
    Command SweepUltraRight;
    
    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // Defining each variable
    public static Drivetrain drivetrain;
    public static Location location;
    public static Elevator elevator;
    public static Encoding Encoding;
    public static Servos Servos;
    public static Intake Intake;
    public double xcelx = RobotMap.locationAccelerometer.getX();
    public double xcely = RobotMap.locationAccelerometer.getY();
    public double Ydistance= 0, YdistancePrev= 0, XdistancePrev= 0, Xdistance= 0;
    public double Xvelocity= 0, XvelocityPrev= 0, Yvelocity= 0, YvelocityPrev= 0;
    public double timePrev= 0, timeCurrent= 0;
    public double timeDelta;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	// Declaring each subsystem
        drivetrain = new Drivetrain();
        location = new Location();
        elevator = new Elevator();
        UltraReading = new UltraReading();
        Encoding = new Encoding();
        Servos = new Servos();
        Intake = new Intake();

        
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands 
        //(which it very likely will), subsystems are not guaranteed to be 
        // constructed yet. Thus, their requires() statements may grab null 
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        Autonomous = new Autonomous();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	// Here on out are just schedules for each period
        if (Autonomous != null) Autonomous.start();{
        RobotMap.time.reset();
        RobotMap.time.start();
        }
        }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (Autonomous != null) Autonomous.cancel();
    	RobotMap.leftServo.setAngle(0);
    	RobotMap.rightServo.setAngle(0);
     
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        Robot.drivetrain.mecanumDrive_Cartesian123(Robot.oi.joystick1.getX(), Robot.oi.joystick1.getY(), Robot.oi.joystick1.getZ(), 0);
        //System.out.println(RobotMap.locationAccelerometer.getAcceleration());
        Timer.delay(1);
       RobotMap.locationGyro.getAngle();
       
       //Set previous values
       timePrev = timeCurrent;
       XdistancePrev = Xdistance;
       YdistancePrev = Ydistance;
       XvelocityPrev = Xvelocity;
       YvelocityPrev = Yvelocity;
      
       //Get current acceleration values
       //Convert from G-Force to Feet Per Second Squared
       xcelx = RobotMap.locationAccelerometer.getX() * 32.17404855561;
       xcely = RobotMap.locationAccelerometer.getY() * 32.17404855561;
       //Get current time
       timeCurrent = RobotMap.time.get();
       timeDelta = timeCurrent - timePrev;
       
       //Calculate current velocity
       Xvelocity = xcelx * timeDelta + XvelocityPrev;
       Yvelocity = xcely * timeDelta + YvelocityPrev;
       
       //Calculate current distance
       Xdistance = Xvelocity * timeDelta + XdistancePrev;
       Ydistance = Yvelocity * timeDelta + YdistancePrev;
       
       System.out.println("The current X-axis acceleration is " + xcelx);
       System.out.println("The current Y-axis acceleration is " + xcely);
       System.out.println("The current X-axis distance is " + Xdistance);
       System.out.println("The current Y-axis distance is " + Ydistance);
       
       
       
       
    
       
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}

